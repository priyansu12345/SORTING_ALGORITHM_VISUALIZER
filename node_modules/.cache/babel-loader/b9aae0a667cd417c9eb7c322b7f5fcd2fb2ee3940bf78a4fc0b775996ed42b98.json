{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Desktop\\\\sorting-visualizer1\\\\src\\\\SortingVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SortingVisualizer = () => {\n  _s();\n  const [array, setArray] = useState([]);\n  const [arraySize, setArraySize] = useState(50);\n  const [algorithm, setAlgorithm] = useState('bubbleSort');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(50);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState([]);\n  const [comparing, setComparing] = useState([]);\n  const [swapping, setSwapping] = useState([]);\n  const [sorted, setSorted] = useState([]);\n  const [pivot, setPivot] = useState(-1);\n  const algorithms = {\n    bubbleSort: 'Bubble Sort',\n    selectionSort: 'Selection Sort',\n    insertionSort: 'Insertion Sort',\n    mergeSort: 'Merge Sort',\n    quickSort: 'Quick Sort',\n    heapSort: 'Heap Sort'\n  };\n\n  // Generate random array\n  const generateArray = useCallback(() => {\n    const newArray = [];\n    for (let i = 0; i < arraySize; i++) {\n      newArray.push(Math.floor(Math.random() * 400) + 10);\n    }\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparing([]);\n    setSwapping([]);\n    setSorted([]);\n    setPivot(-1);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  // Initialize array on mount and size change\n  useEffect(() => {\n    generateArray();\n  }, [generateArray]);\n\n  // Bubble Sort Algorithm\n  const bubbleSort = arr => {\n    const steps = [];\n    const n = arr.length;\n    const array = [...arr];\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        steps.push({\n          array: [...array],\n          comparing: [j, j + 1],\n          swapping: [],\n          sorted: Array.from({\n            length: i\n          }, (_, k) => n - 1 - k)\n        });\n        if (array[j] > array[j + 1]) {\n          [array[j], array[j + 1]] = [array[j + 1], array[j]];\n          steps.push({\n            array: [...array],\n            comparing: [j, j + 1],\n            swapping: [j, j + 1],\n            sorted: Array.from({\n              length: i\n            }, (_, k) => n - 1 - k)\n          });\n        }\n      }\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [],\n        sorted: Array.from({\n          length: i + 1\n        }, (_, k) => n - 1 - k)\n      });\n    }\n    return steps;\n  };\n\n  // Selection Sort Algorithm\n  const selectionSort = arr => {\n    const steps = [];\n    const n = arr.length;\n    const array = [...arr];\n    for (let i = 0; i < n - 1; i++) {\n      let minIdx = i;\n      for (let j = i + 1; j < n; j++) {\n        steps.push({\n          array: [...array],\n          comparing: [minIdx, j],\n          swapping: [],\n          sorted: Array.from({\n            length: i\n          }, (_, k) => k)\n        });\n        if (array[j] < array[minIdx]) {\n          minIdx = j;\n        }\n      }\n      if (minIdx !== i) {\n        [array[i], array[minIdx]] = [array[minIdx], array[i]];\n        steps.push({\n          array: [...array],\n          comparing: [],\n          swapping: [i, minIdx],\n          sorted: Array.from({\n            length: i\n          }, (_, k) => k)\n        });\n      }\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [],\n        sorted: Array.from({\n          length: i + 1\n        }, (_, k) => k)\n      });\n    }\n    return steps;\n  };\n\n  // Insertion Sort Algorithm\n  const insertionSort = arr => {\n    const steps = [];\n    const n = arr.length;\n    const array = [...arr];\n    for (let i = 1; i < n; i++) {\n      let key = array[i];\n      let j = i - 1;\n      steps.push({\n        array: [...array],\n        comparing: [i],\n        swapping: [],\n        sorted: Array.from({\n          length: i\n        }, (_, k) => k)\n      });\n      while (j >= 0 && array[j] > key) {\n        steps.push({\n          array: [...array],\n          comparing: [j, j + 1],\n          swapping: [],\n          sorted: Array.from({\n            length: i\n          }, (_, k) => k)\n        });\n        array[j + 1] = array[j];\n        j = j - 1;\n        steps.push({\n          array: [...array],\n          comparing: [j + 1, j + 2],\n          swapping: [j + 1, j + 2],\n          sorted: Array.from({\n            length: i\n          }, (_, k) => k)\n        });\n      }\n      array[j + 1] = key;\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [],\n        sorted: Array.from({\n          length: i + 1\n        }, (_, k) => k)\n      });\n    }\n    return steps;\n  };\n\n  // Quick Sort Algorithm\n  const quickSort = arr => {\n    const steps = [];\n    const array = [...arr];\n    const partition = (low, high) => {\n      const pivot = array[high];\n      let i = low - 1;\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [],\n        sorted: [],\n        pivot: high\n      });\n      for (let j = low; j <= high - 1; j++) {\n        steps.push({\n          array: [...array],\n          comparing: [j, high],\n          swapping: [],\n          sorted: [],\n          pivot: high\n        });\n        if (array[j] < pivot) {\n          i++;\n          if (i !== j) {\n            [array[i], array[j]] = [array[j], array[i]];\n            steps.push({\n              array: [...array],\n              comparing: [j, high],\n              swapping: [i, j],\n              sorted: [],\n              pivot: high\n            });\n          }\n        }\n      }\n      [array[i + 1], array[high]] = [array[high], array[i + 1]];\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [i + 1, high],\n        sorted: [],\n        pivot: i + 1\n      });\n      return i + 1;\n    };\n    const quickSortHelper = (low, high) => {\n      if (low < high) {\n        const pi = partition(low, high);\n        quickSortHelper(low, pi - 1);\n        quickSortHelper(pi + 1, high);\n      }\n    };\n    quickSortHelper(0, array.length - 1);\n    return steps;\n  };\n\n  // Merge Sort Algorithm\n  const mergeSort = arr => {\n    const steps = [];\n    const array = [...arr];\n    const merge = (left, mid, right) => {\n      const n1 = mid - left + 1;\n      const n2 = right - mid;\n      const leftArr = new Array(n1);\n      const rightArr = new Array(n2);\n      for (let i = 0; i < n1; i++) leftArr[i] = array[left + i];\n      for (let j = 0; j < n2; j++) rightArr[j] = array[mid + 1 + j];\n      let i = 0,\n        j = 0,\n        k = left;\n      while (i < n1 && j < n2) {\n        steps.push({\n          array: [...array],\n          comparing: [left + i, mid + 1 + j],\n          swapping: [],\n          sorted: []\n        });\n        if (leftArr[i] <= rightArr[j]) {\n          array[k] = leftArr[i];\n          i++;\n        } else {\n          array[k] = rightArr[j];\n          j++;\n        }\n        steps.push({\n          array: [...array],\n          comparing: [],\n          swapping: [k],\n          sorted: []\n        });\n        k++;\n      }\n      while (i < n1) {\n        array[k] = leftArr[i];\n        steps.push({\n          array: [...array],\n          comparing: [],\n          swapping: [k],\n          sorted: []\n        });\n        i++;\n        k++;\n      }\n      while (j < n2) {\n        array[k] = rightArr[j];\n        steps.push({\n          array: [...array],\n          comparing: [],\n          swapping: [k],\n          sorted: []\n        });\n        j++;\n        k++;\n      }\n    };\n    const mergeSortHelper = (left, right) => {\n      if (left >= right) return;\n      const mid = Math.floor((left + right) / 2);\n      mergeSortHelper(left, mid);\n      mergeSortHelper(mid + 1, right);\n      merge(left, mid, right);\n    };\n    mergeSortHelper(0, array.length - 1);\n    return steps;\n  };\n\n  // Heap Sort Algorithm\n  const heapSort = arr => {\n    const steps = [];\n    const array = [...arr];\n    const n = array.length;\n    const heapify = (n, i) => {\n      let largest = i;\n      const left = 2 * i + 1;\n      const right = 2 * i + 2;\n      if (left < n) {\n        steps.push({\n          array: [...array],\n          comparing: [largest, left],\n          swapping: [],\n          sorted: []\n        });\n        if (array[left] > array[largest]) {\n          largest = left;\n        }\n      }\n      if (right < n) {\n        steps.push({\n          array: [...array],\n          comparing: [largest, right],\n          swapping: [],\n          sorted: []\n        });\n        if (array[right] > array[largest]) {\n          largest = right;\n        }\n      }\n      if (largest !== i) {\n        [array[i], array[largest]] = [array[largest], array[i]];\n        steps.push({\n          array: [...array],\n          comparing: [],\n          swapping: [i, largest],\n          sorted: []\n        });\n        heapify(n, largest);\n      }\n    };\n\n    // Build heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n      heapify(n, i);\n    }\n\n    // Extract elements from heap\n    for (let i = n - 1; i > 0; i--) {\n      [array[0], array[i]] = [array[i], array[0]];\n      steps.push({\n        array: [...array],\n        comparing: [],\n        swapping: [0, i],\n        sorted: Array.from({\n          length: n - i\n        }, (_, k) => n - 1 - k)\n      });\n      heapify(i, 0);\n    }\n    return steps;\n  };\n\n  // Get sorting steps based on selected algorithm\n  const getSortingSteps = () => {\n    switch (algorithm) {\n      case 'bubbleSort':\n        return bubbleSort(array);\n      case 'selectionSort':\n        return selectionSort(array);\n      case 'insertionSort':\n        return insertionSort(array);\n      case 'quickSort':\n        return quickSort(array);\n      case 'mergeSort':\n        return mergeSort(array);\n      case 'heapSort':\n        return heapSort(array);\n      default:\n        return [];\n    }\n  };\n\n  // Start/pause sorting animation\n  const toggleSorting = () => {\n    if (isPlaying) {\n      setIsPlaying(false);\n    } else {\n      if (steps.length === 0) {\n        const newSteps = getSortingSteps();\n        setSteps(newSteps);\n      }\n      setIsPlaying(true);\n    }\n  };\n\n  // Reset to initial state\n  const resetSorting = () => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparing([]);\n    setSwapping([]);\n    setSorted([]);\n    setPivot(-1);\n    generateArray();\n  };\n\n  // Animation effect\n  useEffect(() => {\n    let intervalId;\n    if (isPlaying && steps.length > 0 && currentStep < steps.length) {\n      intervalId = setInterval(() => {\n        const step = steps[currentStep];\n        setArray(step.array);\n        setComparing(step.comparing || []);\n        setSwapping(step.swapping || []);\n        setSorted(step.sorted || []);\n        setPivot(step.pivot !== undefined ? step.pivot : -1);\n        setCurrentStep(prev => prev + 1);\n      }, 101 - speed);\n    } else if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      setSorted(Array.from({\n        length: array.length\n      }, (_, i) => i));\n      setComparing([]);\n      setSwapping([]);\n      setPivot(-1);\n    }\n    return () => clearInterval(intervalId);\n  }, [isPlaying, currentStep, steps, speed, array.length]);\n\n  // Get bar color based on state\n  const getBarColor = index => {\n    if (sorted.includes(index)) return 'bg-green-500';\n    if (pivot === index) return 'bg-purple-500';\n    if (swapping.includes(index)) return 'bg-red-500';\n    if (comparing.includes(index)) return 'bg-yellow-500';\n    return 'bg-blue-400';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-white p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\",\n          children: \"Sorting Algorithm Visualizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-300\",\n          children: \"Watch different sorting algorithms in action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-800 rounded-lg p-6 mb-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium mb-2\",\n              children: \"Algorithm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: algorithm,\n              onChange: e => {\n                setAlgorithm(e.target.value);\n                resetSorting();\n              },\n              className: \"w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white focus:ring-2 focus:ring-blue-500\",\n              disabled: isPlaying,\n              children: Object.entries(algorithms).map(([key, name]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: key,\n                children: name\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium mb-2\",\n              children: [\"Array Size: \", arraySize]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"10\",\n              max: \"100\",\n              value: arraySize,\n              onChange: e => setArraySize(parseInt(e.target.value)),\n              className: \"w-full\",\n              disabled: isPlaying\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium mb-2\",\n              children: [\"Speed: \", speed, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"1\",\n              max: \"100\",\n              value: speed,\n              onChange: e => setSpeed(parseInt(e.target.value)),\n              className: \"w-full\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: toggleSorting,\n              className: \"flex-1 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-md flex items-center justify-center gap-2 transition-colors\",\n              children: [isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 30\n              }, this) : /*#__PURE__*/_jsxDEV(Play, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 52\n              }, this), isPlaying ? 'Pause' : 'Start']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: resetSorting,\n              className: \"bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-md flex items-center justify-center gap-2 transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 17\n              }, this), \"Reset\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-800 rounded-lg p-4 mb-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6 justify-center text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 bg-blue-400 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Unsorted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 bg-yellow-500 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Comparing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 bg-red-500 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Swapping\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 bg-purple-500 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Pivot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 bg-green-500 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Sorted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-800 rounded-lg p-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-end justify-center h-96 gap-1\",\n          children: array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `transition-all duration-100 ${getBarColor(index)}`,\n            style: {\n              height: `${value / 410 * 100}%`,\n              width: `${Math.max(800 / array.length - 1, 2)}px`,\n              minWidth: '2px'\n            },\n            title: `Index: ${index}, Value: ${value}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 rounded-lg p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-bold mb-4 text-blue-400\",\n            children: [\"Current Algorithm: \", algorithms[algorithm]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-300 space-y-2\",\n            children: [algorithm === 'bubbleSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 22\n                }, this), \" O(n\\xB2)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 22\n                }, this), \" O(1)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 22\n                }, this), \" Repeatedly steps through the list, compares adjacent elements and swaps them if they're in the wrong order.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), algorithm === 'selectionSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 599,\n                  columnNumber: 22\n                }, this), \" O(n\\xB2)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 22\n                }, this), \" O(1)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 22\n                }, this), \" Finds the minimum element and places it at the beginning, then repeats for the remaining elements.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), algorithm === 'insertionSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 22\n                }, this), \" O(n\\xB2)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 22\n                }, this), \" O(1)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 22\n                }, this), \" Builds the final sorted array one item at a time by inserting each element into its correct position.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), algorithm === 'mergeSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 22\n                }, this), \" O(n log n)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 22\n                }, this), \" O(n)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 22\n                }, this), \" Divides the array into halves, sorts them separately, then merges the sorted halves.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), algorithm === 'quickSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 620,\n                  columnNumber: 22\n                }, this), \" O(n log n) average, O(n\\xB2) worst\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 621,\n                  columnNumber: 22\n                }, this), \" O(log n)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 622,\n                  columnNumber: 22\n                }, this), \" Picks a pivot element and partitions the array around it, then recursively sorts the partitions.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), algorithm === 'heapSort' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 627,\n                  columnNumber: 22\n                }, this), \" O(n log n)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Space Complexity:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 628,\n                  columnNumber: 22\n                }, this), \" O(1)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 629,\n                  columnNumber: 22\n                }, this), \" Builds a max heap from the array, then repeatedly extracts the maximum element.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 rounded-lg p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-bold mb-4 text-green-400\",\n            children: \"Statistics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-300 space-y-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Array Size:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 18\n              }, this), \" \", array.length, \" elements\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Current Step:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 18\n              }, this), \" \", currentStep, \" / \", steps.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Progress:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 18\n              }, this), \" \", steps.length > 0 ? Math.round(currentStep / steps.length * 100) : 0, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 18\n              }, this), \" \", isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Completed' : 'Ready']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 5\n  }, this);\n};\n_s(SortingVisualizer, \"LAgkW9GniN9O0VpnylVEIZZM/XM=\");\n_c = SortingVisualizer;\nexport default SortingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Play","Pause","RotateCcw","Settings","jsxDEV","_jsxDEV","Fragment","_Fragment","SortingVisualizer","_s","array","setArray","arraySize","setArraySize","algorithm","setAlgorithm","isPlaying","setIsPlaying","speed","setSpeed","currentStep","setCurrentStep","steps","setSteps","comparing","setComparing","swapping","setSwapping","sorted","setSorted","pivot","setPivot","algorithms","bubbleSort","selectionSort","insertionSort","mergeSort","quickSort","heapSort","generateArray","newArray","i","push","Math","floor","random","arr","n","length","j","Array","from","_","k","minIdx","key","partition","low","high","quickSortHelper","pi","merge","left","mid","right","n1","n2","leftArr","rightArr","mergeSortHelper","heapify","largest","getSortingSteps","toggleSorting","newSteps","resetSorting","intervalId","setInterval","step","undefined","prev","clearInterval","getBarColor","index","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","Object","entries","map","name","type","min","max","parseInt","onClick","size","style","height","width","minWidth","title","round","_c","$RefreshReg$"],"sources":["C:/Users/KIIT/Desktop/sorting-visualizer1/src/SortingVisualizer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\r\n\r\nconst SortingVisualizer = () => {\r\n  const [array, setArray] = useState([]);\r\n  const [arraySize, setArraySize] = useState(50);\r\n  const [algorithm, setAlgorithm] = useState('bubbleSort');\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [speed, setSpeed] = useState(50);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [steps, setSteps] = useState([]);\r\n  const [comparing, setComparing] = useState([]);\r\n  const [swapping, setSwapping] = useState([]);\r\n  const [sorted, setSorted] = useState([]);\r\n  const [pivot, setPivot] = useState(-1);\r\n\r\n  const algorithms = {\r\n    bubbleSort: 'Bubble Sort',\r\n    selectionSort: 'Selection Sort',\r\n    insertionSort: 'Insertion Sort',\r\n    mergeSort: 'Merge Sort',\r\n    quickSort: 'Quick Sort',\r\n    heapSort: 'Heap Sort'\r\n  };\r\n\r\n  // Generate random array\r\n  const generateArray = useCallback(() => {\r\n    const newArray = [];\r\n    for (let i = 0; i < arraySize; i++) {\r\n      newArray.push(Math.floor(Math.random() * 400) + 10);\r\n    }\r\n    setArray(newArray);\r\n    setSteps([]);\r\n    setCurrentStep(0);\r\n    setComparing([]);\r\n    setSwapping([]);\r\n    setSorted([]);\r\n    setPivot(-1);\r\n    setIsPlaying(false);\r\n  }, [arraySize]);\r\n\r\n  // Initialize array on mount and size change\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, [generateArray]);\r\n\r\n  // Bubble Sort Algorithm\r\n  const bubbleSort = (arr) => {\r\n    const steps = [];\r\n    const n = arr.length;\r\n    const array = [...arr];\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      for (let j = 0; j < n - i - 1; j++) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [j, j + 1],\r\n          swapping: [],\r\n          sorted: Array.from({length: i}, (_, k) => n - 1 - k)\r\n        });\r\n\r\n        if (array[j] > array[j + 1]) {\r\n          [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n          steps.push({\r\n            array: [...array],\r\n            comparing: [j, j + 1],\r\n            swapping: [j, j + 1],\r\n            sorted: Array.from({length: i}, (_, k) => n - 1 - k)\r\n          });\r\n        }\r\n      }\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [],\r\n        sorted: Array.from({length: i + 1}, (_, k) => n - 1 - k)\r\n      });\r\n    }\r\n\r\n    return steps;\r\n  };\r\n\r\n  // Selection Sort Algorithm\r\n  const selectionSort = (arr) => {\r\n    const steps = [];\r\n    const n = arr.length;\r\n    const array = [...arr];\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      let minIdx = i;\r\n      \r\n      for (let j = i + 1; j < n; j++) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [minIdx, j],\r\n          swapping: [],\r\n          sorted: Array.from({length: i}, (_, k) => k)\r\n        });\r\n\r\n        if (array[j] < array[minIdx]) {\r\n          minIdx = j;\r\n        }\r\n      }\r\n\r\n      if (minIdx !== i) {\r\n        [array[i], array[minIdx]] = [array[minIdx], array[i]];\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [],\r\n          swapping: [i, minIdx],\r\n          sorted: Array.from({length: i}, (_, k) => k)\r\n        });\r\n      }\r\n\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [],\r\n        sorted: Array.from({length: i + 1}, (_, k) => k)\r\n      });\r\n    }\r\n\r\n    return steps;\r\n  };\r\n\r\n  // Insertion Sort Algorithm\r\n  const insertionSort = (arr) => {\r\n    const steps = [];\r\n    const n = arr.length;\r\n    const array = [...arr];\r\n\r\n    for (let i = 1; i < n; i++) {\r\n      let key = array[i];\r\n      let j = i - 1;\r\n\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [i],\r\n        swapping: [],\r\n        sorted: Array.from({length: i}, (_, k) => k)\r\n      });\r\n\r\n      while (j >= 0 && array[j] > key) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [j, j + 1],\r\n          swapping: [],\r\n          sorted: Array.from({length: i}, (_, k) => k)\r\n        });\r\n\r\n        array[j + 1] = array[j];\r\n        j = j - 1;\r\n\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [j + 1, j + 2],\r\n          swapping: [j + 1, j + 2],\r\n          sorted: Array.from({length: i}, (_, k) => k)\r\n        });\r\n      }\r\n      array[j + 1] = key;\r\n\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [],\r\n        sorted: Array.from({length: i + 1}, (_, k) => k)\r\n      });\r\n    }\r\n\r\n    return steps;\r\n  };\r\n\r\n  // Quick Sort Algorithm\r\n  const quickSort = (arr) => {\r\n    const steps = [];\r\n    const array = [...arr];\r\n\r\n    const partition = (low, high) => {\r\n      const pivot = array[high];\r\n      let i = low - 1;\r\n\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [],\r\n        sorted: [],\r\n        pivot: high\r\n      });\r\n\r\n      for (let j = low; j <= high - 1; j++) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [j, high],\r\n          swapping: [],\r\n          sorted: [],\r\n          pivot: high\r\n        });\r\n\r\n        if (array[j] < pivot) {\r\n          i++;\r\n          if (i !== j) {\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            steps.push({\r\n              array: [...array],\r\n              comparing: [j, high],\r\n              swapping: [i, j],\r\n              sorted: [],\r\n              pivot: high\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      [array[i + 1], array[high]] = [array[high], array[i + 1]];\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [i + 1, high],\r\n        sorted: [],\r\n        pivot: i + 1\r\n      });\r\n\r\n      return i + 1;\r\n    };\r\n\r\n    const quickSortHelper = (low, high) => {\r\n      if (low < high) {\r\n        const pi = partition(low, high);\r\n        quickSortHelper(low, pi - 1);\r\n        quickSortHelper(pi + 1, high);\r\n      }\r\n    };\r\n\r\n    quickSortHelper(0, array.length - 1);\r\n    return steps;\r\n  };\r\n\r\n  // Merge Sort Algorithm\r\n  const mergeSort = (arr) => {\r\n    const steps = [];\r\n    const array = [...arr];\r\n\r\n    const merge = (left, mid, right) => {\r\n      const n1 = mid - left + 1;\r\n      const n2 = right - mid;\r\n      const leftArr = new Array(n1);\r\n      const rightArr = new Array(n2);\r\n\r\n      for (let i = 0; i < n1; i++) leftArr[i] = array[left + i];\r\n      for (let j = 0; j < n2; j++) rightArr[j] = array[mid + 1 + j];\r\n\r\n      let i = 0, j = 0, k = left;\r\n\r\n      while (i < n1 && j < n2) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [left + i, mid + 1 + j],\r\n          swapping: [],\r\n          sorted: []\r\n        });\r\n\r\n        if (leftArr[i] <= rightArr[j]) {\r\n          array[k] = leftArr[i];\r\n          i++;\r\n        } else {\r\n          array[k] = rightArr[j];\r\n          j++;\r\n        }\r\n\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [],\r\n          swapping: [k],\r\n          sorted: []\r\n        });\r\n        k++;\r\n      }\r\n\r\n      while (i < n1) {\r\n        array[k] = leftArr[i];\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [],\r\n          swapping: [k],\r\n          sorted: []\r\n        });\r\n        i++;\r\n        k++;\r\n      }\r\n\r\n      while (j < n2) {\r\n        array[k] = rightArr[j];\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [],\r\n          swapping: [k],\r\n          sorted: []\r\n        });\r\n        j++;\r\n        k++;\r\n      }\r\n    };\r\n\r\n    const mergeSortHelper = (left, right) => {\r\n      if (left >= right) return;\r\n      const mid = Math.floor((left + right) / 2);\r\n      mergeSortHelper(left, mid);\r\n      mergeSortHelper(mid + 1, right);\r\n      merge(left, mid, right);\r\n    };\r\n\r\n    mergeSortHelper(0, array.length - 1);\r\n    return steps;\r\n  };\r\n\r\n  // Heap Sort Algorithm\r\n  const heapSort = (arr) => {\r\n    const steps = [];\r\n    const array = [...arr];\r\n    const n = array.length;\r\n\r\n    const heapify = (n, i) => {\r\n      let largest = i;\r\n      const left = 2 * i + 1;\r\n      const right = 2 * i + 2;\r\n\r\n      if (left < n) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [largest, left],\r\n          swapping: [],\r\n          sorted: []\r\n        });\r\n\r\n        if (array[left] > array[largest]) {\r\n          largest = left;\r\n        }\r\n      }\r\n\r\n      if (right < n) {\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [largest, right],\r\n          swapping: [],\r\n          sorted: []\r\n        });\r\n\r\n        if (array[right] > array[largest]) {\r\n          largest = right;\r\n        }\r\n      }\r\n\r\n      if (largest !== i) {\r\n        [array[i], array[largest]] = [array[largest], array[i]];\r\n        steps.push({\r\n          array: [...array],\r\n          comparing: [],\r\n          swapping: [i, largest],\r\n          sorted: []\r\n        });\r\n        heapify(n, largest);\r\n      }\r\n    };\r\n\r\n    // Build heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n      heapify(n, i);\r\n    }\r\n\r\n    // Extract elements from heap\r\n    for (let i = n - 1; i > 0; i--) {\r\n      [array[0], array[i]] = [array[i], array[0]];\r\n      steps.push({\r\n        array: [...array],\r\n        comparing: [],\r\n        swapping: [0, i],\r\n        sorted: Array.from({length: n - i}, (_, k) => n - 1 - k)\r\n      });\r\n      heapify(i, 0);\r\n    }\r\n\r\n    return steps;\r\n  };\r\n\r\n  // Get sorting steps based on selected algorithm\r\n  const getSortingSteps = () => {\r\n    switch (algorithm) {\r\n      case 'bubbleSort': return bubbleSort(array);\r\n      case 'selectionSort': return selectionSort(array);\r\n      case 'insertionSort': return insertionSort(array);\r\n      case 'quickSort': return quickSort(array);\r\n      case 'mergeSort': return mergeSort(array);\r\n      case 'heapSort': return heapSort(array);\r\n      default: return [];\r\n    }\r\n  };\r\n\r\n  // Start/pause sorting animation\r\n  const toggleSorting = () => {\r\n    if (isPlaying) {\r\n      setIsPlaying(false);\r\n    } else {\r\n      if (steps.length === 0) {\r\n        const newSteps = getSortingSteps();\r\n        setSteps(newSteps);\r\n      }\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  // Reset to initial state\r\n  const resetSorting = () => {\r\n    setIsPlaying(false);\r\n    setCurrentStep(0);\r\n    setSteps([]);\r\n    setComparing([]);\r\n    setSwapping([]);\r\n    setSorted([]);\r\n    setPivot(-1);\r\n    generateArray();\r\n  };\r\n\r\n  // Animation effect\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    if (isPlaying && steps.length > 0 && currentStep < steps.length) {\r\n      intervalId = setInterval(() => {\r\n        const step = steps[currentStep];\r\n        setArray(step.array);\r\n        setComparing(step.comparing || []);\r\n        setSwapping(step.swapping || []);\r\n        setSorted(step.sorted || []);\r\n        setPivot(step.pivot !== undefined ? step.pivot : -1);\r\n        setCurrentStep(prev => prev + 1);\r\n      }, 101 - speed);\r\n    } else if (currentStep >= steps.length) {\r\n      setIsPlaying(false);\r\n      setSorted(Array.from({length: array.length}, (_, i) => i));\r\n      setComparing([]);\r\n      setSwapping([]);\r\n      setPivot(-1);\r\n    }\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [isPlaying, currentStep, steps, speed, array.length]);\r\n\r\n  // Get bar color based on state\r\n  const getBarColor = (index) => {\r\n    if (sorted.includes(index)) return 'bg-green-500';\r\n    if (pivot === index) return 'bg-purple-500';\r\n    if (swapping.includes(index)) return 'bg-red-500';\r\n    if (comparing.includes(index)) return 'bg-yellow-500';\r\n    return 'bg-blue-400';\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-white p-6\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        {/* Header */}\r\n        <div className=\"text-center mb-8\">\r\n          <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\r\n            Sorting Algorithm Visualizer\r\n          </h1>\r\n          <p className=\"text-gray-300\">Watch different sorting algorithms in action</p>\r\n        </div>\r\n\r\n        {/* Controls */}\r\n        <div className=\"bg-gray-800 rounded-lg p-6 mb-8\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n            {/* Algorithm Selection */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-2\">Algorithm</label>\r\n              <select\r\n                value={algorithm}\r\n                onChange={(e) => {\r\n                  setAlgorithm(e.target.value);\r\n                  resetSorting();\r\n                }}\r\n                className=\"w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white focus:ring-2 focus:ring-blue-500\"\r\n                disabled={isPlaying}\r\n              >\r\n                {Object.entries(algorithms).map(([key, name]) => (\r\n                  <option key={key} value={key}>{name}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Array Size */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-2\">\r\n                Array Size: {arraySize}\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"10\"\r\n                max=\"100\"\r\n                value={arraySize}\r\n                onChange={(e) => setArraySize(parseInt(e.target.value))}\r\n                className=\"w-full\"\r\n                disabled={isPlaying}\r\n              />\r\n            </div>\r\n\r\n            {/* Speed Control */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-2\">\r\n                Speed: {speed}%\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"100\"\r\n                value={speed}\r\n                onChange={(e) => setSpeed(parseInt(e.target.value))}\r\n                className=\"w-full\"\r\n              />\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex gap-2\">\r\n              <button\r\n                onClick={toggleSorting}\r\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-md flex items-center justify-center gap-2 transition-colors\"\r\n              >\r\n                {isPlaying ? <Pause size={16} /> : <Play size={16} />}\r\n                {isPlaying ? 'Pause' : 'Start'}\r\n              </button>\r\n              <button\r\n                onClick={resetSorting}\r\n                className=\"bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-md flex items-center justify-center gap-2 transition-colors\"\r\n              >\r\n                <RotateCcw size={16} />\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Legend */}\r\n        <div className=\"bg-gray-800 rounded-lg p-4 mb-6\">\r\n          <div className=\"flex flex-wrap gap-6 justify-center text-sm\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-blue-400 rounded\"></div>\r\n              <span>Unsorted</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>\r\n              <span>Comparing</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\r\n              <span>Swapping</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\r\n              <span>Pivot</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\r\n              <span>Sorted</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Visualization Area */}\r\n        <div className=\"bg-gray-800 rounded-lg p-6\">\r\n          <div className=\"flex items-end justify-center h-96 gap-1\">\r\n            {array.map((value, index) => (\r\n              <div\r\n                key={index}\r\n                className={`transition-all duration-100 ${getBarColor(index)}`}\r\n                style={{\r\n                  height: `${(value / 410) * 100}%`,\r\n                  width: `${Math.max(800 / array.length - 1, 2)}px`,\r\n                  minWidth: '2px'\r\n                }}\r\n                title={`Index: ${index}, Value: ${value}`}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Algorithm Info */}\r\n        <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n          <div className=\"bg-gray-800 rounded-lg p-6\">\r\n            <h3 className=\"text-xl font-bold mb-4 text-blue-400\">Current Algorithm: {algorithms[algorithm]}</h3>\r\n            <div className=\"text-sm text-gray-300 space-y-2\">\r\n              {algorithm === 'bubbleSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n²)</p>\r\n                  <p><strong>Space Complexity:</strong> O(1)</p>\r\n                  <p><strong>Description:</strong> Repeatedly steps through the list, compares adjacent elements and swaps them if they're in the wrong order.</p>\r\n                </>\r\n              )}\r\n              {algorithm === 'selectionSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n²)</p>\r\n                  <p><strong>Space Complexity:</strong> O(1)</p>\r\n                  <p><strong>Description:</strong> Finds the minimum element and places it at the beginning, then repeats for the remaining elements.</p>\r\n                </>\r\n              )}\r\n              {algorithm === 'insertionSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n²)</p>\r\n                  <p><strong>Space Complexity:</strong> O(1)</p>\r\n                  <p><strong>Description:</strong> Builds the final sorted array one item at a time by inserting each element into its correct position.</p>\r\n                </>\r\n              )}\r\n              {algorithm === 'mergeSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n log n)</p>\r\n                  <p><strong>Space Complexity:</strong> O(n)</p>\r\n                  <p><strong>Description:</strong> Divides the array into halves, sorts them separately, then merges the sorted halves.</p>\r\n                </>\r\n              )}\r\n              {algorithm === 'quickSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n log n) average, O(n²) worst</p>\r\n                  <p><strong>Space Complexity:</strong> O(log n)</p>\r\n                  <p><strong>Description:</strong> Picks a pivot element and partitions the array around it, then recursively sorts the partitions.</p>\r\n                </>\r\n              )}\r\n              {algorithm === 'heapSort' && (\r\n                <>\r\n                  <p><strong>Time Complexity:</strong> O(n log n)</p>\r\n                  <p><strong>Space Complexity:</strong> O(1)</p>\r\n                  <p><strong>Description:</strong> Builds a max heap from the array, then repeatedly extracts the maximum element.</p>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-gray-800 rounded-lg p-6\">\r\n            <h3 className=\"text-xl font-bold mb-4 text-green-400\">Statistics</h3>\r\n            <div className=\"text-sm text-gray-300 space-y-2\">\r\n              <p><strong>Array Size:</strong> {array.length} elements</p>\r\n              <p><strong>Current Step:</strong> {currentStep} / {steps.length}</p>\r\n              <p><strong>Progress:</strong> {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%</p>\r\n              <p><strong>Status:</strong> {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Completed' : 'Ready'}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}